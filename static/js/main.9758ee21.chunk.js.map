{"version":3,"sources":["components/OneNews.jsx","components/TopTenNews.jsx","App.jsx","serviceWorker.js","index.js"],"names":["OneNews","props","className","href","info","url","title","des_facet","map","e","index","key","abstract","published_date","TopTenNews","useState","Data","setData","useEffect","fetchData","a","axios","get","process","results","data","interval","setInterval","clearInterval","id","App","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RAEe,SAASA,EAAQC,GAC5B,OACI,yBAAKC,UAAU,QACX,wBAAIA,UAAU,SACV,uBAAGC,KAAMF,EAAMG,KAAKC,KAAMJ,EAAMG,KAAKE,QAEzC,yBAAKJ,UAAU,oBACVD,EAAMG,KAAKG,UAAUC,KAAI,SAACC,EAAGC,GAAJ,OACtB,yBAAKC,IAAKD,EAAOR,UAAU,WACtBO,OAIb,uBAAGP,UAAU,YAAYD,EAAMG,KAAKQ,UACpC,yBAAKV,UAAU,eACX,uBAAGA,UAAU,eAAb,IAA6BD,EAAMG,KAAKS,gBACxC,uBAAGX,UAAU,eACT,uBAAGC,KAAMF,EAAMG,KAAKC,KAApB,mB,qBCfL,SAASS,IAAc,IAAD,EACTC,mBAAS,IADA,mBAC1BC,EAD0B,KACpBC,EADoB,KAwBjC,OArBAC,qBAAU,WAAO,SACEC,IADH,2EACZ,8BAAAC,EAAA,sEAGcC,IAAMC,IAAN,2EAC8DC,qCAJ5E,gBAEgBC,EAFhB,EAEQC,KAAQD,QAIZP,EAAQO,GANZ,4CADY,sBAaZL,IACA,IAAMO,EAAWC,aAAY,WACzBR,MACD,KACH,OAAO,WACHS,cAAcF,MAEnB,IAEC,6BACKV,GAAQA,EAAKR,KAAI,SAAAC,GAAC,OAAI,kBAACT,EAAD,CAASW,IAAKF,EAAEoB,GAAIzB,KAAMK,QCJ9CqB,MAtBf,WACI,OACI,yBAAK5B,UAAU,OACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,UAAf,yCAKJ,yBAAKA,UAAU,WACX,kBAACY,EAAD,OAEJ,gCACI,yBACIiB,IAAI,iFACJC,IAAI,QCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9758ee21.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function OneNews(props) {\n    return (\n        <div className=\"card\">\n            <h1 className=\"title\">\n                <a href={props.info.url}>{props.info.title}</a>\n            </h1>\n            <div className=\"keyWordContainer\">\n                {props.info.des_facet.map((e, index) => (\n                    <div key={index} className=\"keyWord\">\n                        {e}\n                    </div>\n                ))}\n            </div>\n            <p className=\"abstract\">{props.info.abstract}</p>\n            <div className=\"card-footer\">\n                <p className=\"publishDate\"> {props.info.published_date}</p>\n                <p className=\"more-detail\">\n                    <a href={props.info.url}>Read More -></a>\n                </p>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport OneNews from './OneNews';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nexport default function TopTenNews() {\n    const [Data, setData] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            let {\n                data: { results }\n            } = await axios.get(\n                `https://api.nytimes.com/svc/mostpopular/v2/viewed/1.json?api-key=${process.env.REACT_APP_API_KEY}`\n            );\n            setData(results);\n            // // server side calling api\n            // let { data } = await axios.get('http://localhost:8080');\n            // console.log(data);\n            // setData(data);\n        }\n        fetchData();\n        const interval = setInterval(() => {\n            fetchData();\n        }, 1000 * 60 * 5);\n        return () => {\n            clearInterval(interval);\n        };\n    }, []);\n    return (\n        <div>\n            {Data && Data.map(e => <OneNews key={e.id} info={e}></OneNews>)}\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\n// import './bootstrap.min.css';\nimport TopTenNews from './components/TopTenNews';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"header-fixed\">\n                <div className=\"header\">\n                    Top 20 viewed news in NEW YORK TIMES\n                </div>\n                {/* <div>manus</div> */}\n            </div>\n            <div className=\"content\">\n                <TopTenNews />\n            </div>\n            <footer>\n                <img\n                    src=\"https://developer.nytimes.com/files/poweredby_nytimes_150a.png?v=1568441067758\"\n                    alt=\"\"\n                />\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}